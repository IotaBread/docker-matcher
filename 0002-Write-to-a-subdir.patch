From 5f59262c422b3526ad4683c70b5a6f3e931e0ca3 Mon Sep 17 00:00:00 2001
From: IotaBread <iotabread@gmail.com>
Date: Thu, 17 Aug 2023 20:32:15 -0400
Subject: [PATCH 2/2] Write to a subdir

---
 save_methods.ts | 12 ++++++------
 setup.ts        | 14 +++++++-------
 2 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/save_methods.ts b/save_methods.ts
index bc8d1a8..0532c68 100755
--- a/save_methods.ts
+++ b/save_methods.ts
@@ -20,18 +20,18 @@ console.log("Loading mappings...");
 const base_mappings = new enigma.Mappings("base");
 const new_mappings = new enigma.Mappings("new");
 // @TODO unharcode this
-enigma.read_mappings(from_version + "/mappings/", base_mappings);
-enigma.read_mappings(to_version + "/mappings/", new_mappings);
+enigma.read_mappings('qm/' + from_version + "/mappings/", base_mappings);
+enigma.read_mappings('qm/' + to_version + "/mappings/", new_mappings);
 
 // @TODO download it from somewhere the maven? (snapshot make it a bit complicated)
 console.log(`Downloading ${to_version} hashed tiny file...`);
 
 const new_tiny_download = await fetch(`${HASHED_MAVEN_ROUTE}/${to_version}/hashed-${to_version}.tiny`);
-const file = await Deno.open(`hashed-${to_version}.tiny`, { create: true, write: true });
+const file = await Deno.open(`qm/hashed-${to_version}.tiny`, { create: true, write: true });
 await new_tiny_download.body?.pipeTo(file.writable);
 
 console.log(`Loading ${to_version} hashed tiny file...`);
-const new_tiny_file = await Deno.readTextFile(`hashed-${to_version}.tiny`);
+const new_tiny_file = await Deno.readTextFile(`qm/hashed-${to_version}.tiny`);
 const new_tiny = tiny.parse(new_tiny_file);
 
 async function load_jar_file(base_path: string, version: string) {
@@ -40,9 +40,9 @@ async function load_jar_file(base_path: string, version: string) {
 }
 
 console.log(`Loading ${from_version} hashed mojmap JAR file...`);
-const base_hashed_mojmap_jar = await load_jar_file(from_version + "/", from_version);
+const base_hashed_mojmap_jar = await load_jar_file('qm/' + from_version + "/", from_version);
 console.log(`Loading ${to_version} hashed mojmap JAR file...`);
-const new_hashed_mojmap_jar = await load_jar_file(to_version + "/", to_version);
+const new_hashed_mojmap_jar = await load_jar_file('qm/' + to_version + "/", to_version);
 
 interface A {
     lvt: number,
diff --git a/setup.ts b/setup.ts
index bb19373..93475ba 100644
--- a/setup.ts
+++ b/setup.ts
@@ -12,7 +12,7 @@ if (to_version === undefined) {
 }
 
 console.log("Cleaning up folder...")
-for (const dirEntry of Deno.readDirSync("./")) {
+for (const dirEntry of Deno.readDirSync("./qm")) {
     if (dirEntry.isDirectory && existsSync(dirEntry.name + "/mappings")) {
         console.log("Deleting old mappings directory " + dirEntry.name + "...")
         Deno.removeSync("./" + dirEntry.name, { recursive: true });
@@ -21,20 +21,20 @@ for (const dirEntry of Deno.readDirSync("./")) {
 
 // clone
 console.log('Cloning old qm version...')
-await exec('git clone https://github.com/quiltmc/quilt-mappings.git --depth 1 --branch ' + from_version + ' --single-branch ' + from_version);
+await exec('git clone https://github.com/quiltmc/quilt-mappings.git --depth 1 --branch ' + from_version + ' --single-branch qm/' + from_version);
 
 console.log('Copying to new version...')
-await exec('cp -r ' + from_version + ' ' + to_version);
+await exec('cp -r qm/' + from_version + ' qm/' + to_version);
 
 // update version
 console.log('Updating version in new clone...')
 const decoder = new TextDecoder('utf-8')
-const contents = Deno.readFileSync(to_version + '/buildSrc/src/main/java/quilt/internal/Constants.java')
+const contents = Deno.readFileSync('qm/' + to_version + '/buildSrc/src/main/java/quilt/internal/Constants.java')
 const text = decoder.decode(contents);
 const new_text = text.replace(from_version, to_version);
-Deno.writeFileSync(to_version + '/buildSrc/src/main/java/quilt/internal/Constants.java', new TextEncoder().encode(new_text))
+Deno.writeFileSync('qm/' + to_version + '/buildSrc/src/main/java/quilt/internal/Constants.java', new TextEncoder().encode(new_text))
 
-const new_contents = Deno.readFileSync(to_version + '/buildSrc/src/main/java/quilt/internal/Constants.java')
+const new_contents = Deno.readFileSync('qm/' + to_version + '/buildSrc/src/main/java/quilt/internal/Constants.java')
 const new_raw_text = decoder.decode(new_contents);
 if (!new_raw_text.includes(to_version) || new_raw_text.includes(from_version)) {
     throw new Error("Failed to update version in new clone! Check that your versions are correct (first version must match current QM default branch), and if yes, please follow manual steps, starting at step 5.");
@@ -42,7 +42,7 @@ if (!new_raw_text.includes(to_version) || new_raw_text.includes(from_version)) {
 
 // set up new branch
 console.log('Setting up new branch...')
-await exec('git -C ' + to_version + ' checkout -b ' + to_version)
+await exec('git -C qm/' + to_version + ' checkout -b ' + to_version)
 
 console.log("Done!");
 Deno.exit(0);
\ No newline at end of file
-- 
2.34.1

